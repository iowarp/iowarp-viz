#!/usr/bin/env python3
"""
USAGE: hermes_viz_server.py <port> <period seconds>
"""
from py_hermes_mdm.mock_mdm import MetadataSnapshot
from flask import Flask, jsonify
import threading
import time
import sys
import os

mdm = MetadataSnapshot()

def periodic_collect(refresh):
    while True:
        mdm.collect_target_md("", 100)
        mdm.collect_blob_md("", 100)
        mdm.collect_tag_md("", 100)
        time.sleep(refresh)

app = Flask(__name__)
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    return response

@app.route('/api/tags', methods=['GET'])
def get_tags():
    return jsonify(mdm.tag_info)

@app.route('/api/targets', methods=['GET'])
def get_targets():
    return jsonify(mdm.target_info)

@app.route('/api/blobs', methods=['GET'])
def get_blobs():
    return jsonify(mdm.blob_info)

@app.route('/', methods=['GET'])
def get_html():
    html_path = os.path.join(os.environ['HOME'], '.hermes_viz/iowarp.html')
    with open(html_path, 'r') as f:
        return f.read()

@app.route('/iowarp.js', methods=['GET'])
def get_js():
    js_path = os.path.join(os.environ['HOME'], '.hermes_viz/iowarp.js')
    with open(js_path, 'r') as f:
        return f.read()

if __name__ == '__main__':
    os.chdir(os.path.join(os.environ['HOME'], '.hermes_viz'))
    port = int(sys.argv[1])
    refresh = int(sys.argv[2])
    collect_thread = threading.Thread(target=lambda: periodic_collect(refresh), daemon=True)
    collect_thread.start()
    app.run(debug=True, port=port)
